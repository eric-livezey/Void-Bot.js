import { requestAPI } from "./utils.js";

class Playlist {
    kind;
    etag;
    id;
    snippet;
    status;
    contentDetails;
    player;
    localizations;
    listItems;

    /**
     * @param {{statusCode:number,statusMessage:string,headers:{accept?:string|undefined,"accept-language"?:string|undefined,"accept-patch"?:string|undefined,"accept-ranges"?:string|undefined,"access-control-allow-credentials"?:string|undefined,"access-control-allow-headers"?:string|undefined,"access-control-allow-methods"?:string|undefined,"access-control-allow-origin"?:string|undefined,"access-control-expose-headers"?:string|undefined,"access-control-max-age"?:string|undefined,"access-control-request-headers"?:string|undefined,"access-control-request-method"?:string|undefined,age?:string|undefined,allow?:string|undefined,"alt-svc"?:string|undefined,authorization?:string|undefined,"cache-control"?:string|undefined,connection?:string|undefined,"content-disposition"?:string|undefined,"content-encoding"?:string|undefined,"content-language"?:string|undefined,"content-length"?:string|undefined,"content-location"?:string|undefined,"content-range"?:string|undefined,"content-type"?:string|undefined,cookie?:string|undefined,date?:string|undefined,etag?:string|undefined,expect?:string|undefined,expires?:string|undefined,forwarded?:string|undefined,from?:string|undefined,host?:string|undefined,"if-match"?:string|undefined,"if-modified-since"?:string|undefined,"if-none-match"?:string|undefined,"if-unmodified-since"?:string|undefined,"last-modified"?:string|undefined,location?:string|undefined,origin?:string|undefined,pragma?:string|undefined,"proxy-authenticate"?:string|undefined,"proxy-authorization"?:string|undefined,"public-key-pins"?:string|undefined,range?:string|undefined,referer?: string | undefined,"retry-after"?:string|undefined,"sec-websocket-accept"?:string|undefined,"sec-websocket-extensions"?: string | undefined,"sec-websocket-key"?:string|undefined,"sec-websocket-protocol"?:string|undefined,"sec-websocket-version"?:string|undefined,"set-cookie"?:string[]|undefined,"strict-transport-security"?:string|undefined,tk?:string|undefined,trailer?:string|undefined,"transfer-encoding"?:string|undefined,upgrade?:string|undefined,"user-agent"?:string|undefined,vary?:string|undefined,via?:string|undefined,warning?:string|undefined,"www-authenticate"?: string | undefined},body:{responseContext:{visitorData:string,serviceTrackingParams:{service:string,params:{key:string,value:string}[]}[],mainAppWebResponseContext:{loggedOut:boolean,trackingParam:string},webResponseContextExtensionData:{hasDecorated:boolean}},contents:{twoColumnBrowseResultsRenderer:{tabs:{tabRenderer:{selected:boolean,content:{sectionListRenderer:{contents:{itemSectionRenderer:{contents:{playlistVideoListRenderer:{contents:{playlistVideoRenderer?:{videoId:string,thumbnail:{thumbnails:{url:string,width:number,height:number}[]},title:{runs:{text:string}[],accessibility:{accessibilityData:{label:string}}},index:{simpleText:string},shortBylineText:{runs:{text:string,navigationEndpoint:{clickTrackingParams:string,commandMetadata:{webCommandMetadata:{url:string,webPageType:string,rootVe:number,apiUrl:string}},browseEndpoint:{browseId:string,canonicalBaseUrl:string}}}[]},lengthText:{accessibility:{accessibilityData:{label:string}},simpleText:string},navigationEndpoint:{clickTrackingParams:string,commandMetadata:{webCommandMetadata:{url:string,webPageType:string,rootVe:number}},watchEndpoint:{videoId:string,playlistId:string,index:number,params:string,playerParams:string,loggingContext:{vssLoggingContext:{serializedContextData:string}},watchEndpointSupportedOnesieConfig:{html5PlaybackOnesieConfig:{commonConfig:{url:string}}}}},lengthSeconds:string,trackingParams:string,isPlayable:boolean,menu:{menuRenderer:{items:{menuServiceItemRenderer:{text:{runs:{text:string}[]},icon:{iconType:string},serviceEndpoint:{clickTrackingParams:string,commandMetadata:{webCommandMetadata:{sendPost:boolean}},signalServiceEndpoint:{signal:string,actions:{clickTrackingParams:string,addToPlaylistCommand:{openMiniplayer:boolean,videoId:string,listType:string,onCreateListCommand:{clickTrackingParams:string,commandMetadata:{webCommandMetadata:{sendPost:boolean,apiUrl:string}},createPlaylistServiceEndpoint:{videoIds:string[],params:string}},videoIds:string[]}}[]}},trackingParams:string}}[],trackingParams:string,accessibility:{accessibilityData:{label:string}}}},thumbnailOverlays:{thumbnailOverlayTimeStatusRenderer:{text:{accessibility:{accessibilityData:{label:string}},simpleText:string},style:string}}[],videoInfo:{runs:{text:string}[]}},continuationItemRenderer?:{trigger:string,continuationEndpoint:{clickTrackingParams:string,commandMetadata:{webCommandMetadata:{sendPost:boolean,apiUrl:string}},continuationCommand:{token:string,request:string}}}}[],playlistId:string,isEditable:boolean,canReorder:boolean,trackingParams:string,targetId:string}}[],trackingParams:string}}[],trackingParams:string}},trackingParams:string}}[]}},header:{playlistHeaderRenderer:{playlistId:string,title:{simpleText:string},numVideosText:{runs:{text:string}[]},descriptionText:{simpleText:string},ownerText:{runs:{text:string,navigationEndpoint:{clickTrackingParams:string,commandMetadata:{webCommandMetadata:{url:string,webPageType:string,rootVe:number,apiUrl:string}},browseEndpoint:{browseId:string,canonicalBaseUrl:string}}}[]},viewCountText:{simpleText:string},shareData:{canShare:boolean},isEditable:boolean,privacy:string,ownerEndpoint:{clickTrackingParams:string,commandMetadata:{webCommandMetadata:{url:string,webPageType:string,rootVe:number,apiUrl:string}},browseEndpoint:{browseId:string,canonicalBaseUrl:string}},editableDetails:{canDelete:boolean},trackingParams:string,serviceEndpoints:{clickTrackingParams:string,commandMetadata:{webCommandMetadata:{sendPost:boolean,apiUrl:string}},playlistEditEndpoint:{actions:{action:string,sourcePlaylistId:string}[]}}[],stats:{runs:{text:string}[]}[],briefStats:{runs:{text:string}[]}[],playlistHeaderBanner:{heroPlaylistThumbnailRenderer:{thumbnail:{thumbnails:{url:string,width:number,height:number}[]},maxRatio:number,trackingParams:string,onTap:{clickTrackingParams:string,commandMetadata:{webCommandMetadata:{url:string,webPageType:string,rootVe:number}},watchEndpoint:{videoId:string,playlistId:string,playerParams:string,loggingContext:{vssLoggingContext:{serializedContextData:string}},watchEndpointSupportedOnesieConfig:{html5PlaybackOnesieConfig:{commonConfig:{url:string}}}}},thumbnailOverlays:{thumbnailOverlayHoverTextRenderer:{text:{simpleText:string},icon:{iconType:string}}}}},saveButton:{toggleButtonRenderer:{style:{styleType:string},size:{sizeType:string},isToggled:boolean,isDisabled:boolean,defaultIcon:{iconType:string},toggledIcon:{iconType:string},trackingParams:string,defaultTooltip:string,toggledTooltip:string,toggledStyle:{styleType:string},defaultNavigationEndpoint:{clickTrackingParams:string,commandMetadata:{webCommandMetadata:{ignoreNavigation:boolean}},modalEndpoint:{modal:{modalWithTitleAndButtonRenderer:{title:{simpleText:string},content:{simpleText:string},button:{buttonRenderer:{style:string,size:string,isDisabled:boolean,text:{simpleText:string},navigationEndpoint:{clickTrackingParams:string,commandMetadata:{webCommandMetadata:{url:string,webPageType:string,rootVe:number}},signInEndpoint:{nextEndpoint:{clickTrackingParams:string,commandMetadata:{webCommandMetadata:{url:string,webPageType:string,rootVe:number,apiUrl:string}},browseEndpoint:{browseId:string}},idamTag:string}},trackingParams:string}}}}}},accessibilityData:{accessibilityData:{label:string}},toggledAccessibilityData:{accessibilityData:{label:string}}}},shareButton:{buttonRenderer:{style:string,size:string,isDisabled:boolean,serviceEndpoint:{clickTrackingParams:string,commandMetadata:{webCommandMetadata:{sendPost:boolean,apiUrl:string}},shareEntityServiceEndpoint:{serializedShareEntity:string,commands:{clickTrackingParams:string,openPopupAction:{popup:{unifiedSharePanelRenderer:{trackingParams:string,showLoadingSpinner:boolean}},popupType:string,beReused:boolean}}[]}},icon:{iconType:string},tooltip:string,trackingParams:string,accessibilityData:{accessibilityData:{label:string}}}},moreActionsMenu:{menuRenderer:{items:{menuNavigationItemRenderer:{text:{simpleText:string},icon:{iconType:string},navigationEndpoint:{clickTrackingParams:string,commandMetadata:{webCommandMetadata:{url:string,webPageType:string,rootVe:number,apiUrl:string}},browseEndpoint:{browseId:string,params:string,nofollow:boolean,navigationType:string}},trackingParams:string}}[],trackingParams:string,accessibility:{accessibilityData:{label:string}},targetId:string}},playButton:{buttonRenderer:{style:string,size:string,isDisabled:boolean,text:{simpleText:string},icon:{iconType:string},navigationEndpoint:{clickTrackingParams:string,commandMetadata:{webCommandMetadata:{url:string,webPageType:string,rootVe:number}},watchEndpoint:{videoId:string,playlistId:string,playerParams:string,loggingContext:{vssLoggingContext:{serializedContextData:string}},watchEndpointSupportedOnesieConfig:{html5PlaybackOnesieConfig:{commonConfig:{url:string}}}}},trackingParams:string}},shufflePlayButton:{buttonRenderer:{style:string,size:string,isDisabled:boolean,text:{simpleText:string},icon:{iconType:string},navigationEndpoint:{clickTrackingParams:string,commandMetadata:{webCommandMetadata:{url:string,webPageType:string,rootVe:number}},watchEndpoint:{videoId:string,playlistId:string,params:string,playerParams:string,loggingContext:{vssLoggingContext:{serializedContextData:string}},watchEndpointSupportedOnesieConfig:{html5PlaybackOnesieConfig:{commonConfig:{url:string}}}}},trackingParams:string}},onDescriptionTap:{clickTrackingParams:string,openPopupAction:{popup:{fancyDismissibleDialogRenderer:{dialogMessage:{},title:{runs:{text:string}[]},confirmLabel:{runs:{text:string}[]},trackingParams:string}},popupType:string}},cinematicContainer:{cinematicContainerRenderer:{backgroundImageConfig:{thumbnail:{thumbnails:{url:string,width:number,height:number}[]}},gradientColorConfig:{lightThemeColor:number,darkThemeColor:number,startLocation:number}[],config:{lightThemeBackgroundColor:number,darkThemeBackgroundColor:number,colorSourceSizeMultiplier:number,applyClientImageBlur:boolean}}},byline:{playlistBylineRenderer:{text:{runs:{text:string}[]}}}[],descriptionTapText:{runs:{text:string}[]}}},alerts:{alertWithButtonRenderer:{type:string,text:{simpleText:string},dismissButton:{buttonRenderer:{style:string,size:string,isDisabled:boolean,icon:{iconType:string},trackingParams:string,accessibilityData:{accessibilityData:{label:string}}}}}}[],metadata:{playlistMetadataRenderer:{title:string,androidAppindexingLink:string,iosAppindexingLink:string}},trackingParams:string,topbar:{desktopTopbarRenderer:{logo:{topbarLogoRenderer:{iconImage:{iconType:string},tooltipText:{runs:{text:string}[]},endpoint:{clickTrackingParams:string,commandMetadata:{webCommandMetadata:{url:string,webPageType:string,rootVe:number,apiUrl:string}},browseEndpoint:{browseId:string}},trackingParams:string,overrideEntityKey:string}},searchbox:{fusionSearchboxRenderer:{icon:{iconType:string},placeholderText:{runs:{text:string}[]},config:{webSearchboxConfig:{requestLanguage:string,requestDomain:string,hasOnscreenKeyboard:boolean,focusSearchbox:boolean}},trackingParams:string,searchEndpoint:{clickTrackingParams:string,commandMetadata:{webCommandMetadata:{url:string,webPageType:string,rootVe:number}},searchEndpoint:{query:string}},clearButton:{buttonRenderer:{style:string,size:string,isDisabled:boolean,icon:{iconType:string},trackingParams:string,accessibilityData:{accessibilityData:{label:string}}}}}},trackingParams:string,topbarButtons:{topbarMenuButtonRenderer:{icon:{iconType:string},menuRequest:{clickTrackingParams:string,commandMetadata:{webCommandMetadata:{sendPost:boolean,apiUrl:string}},signalServiceEndpoint:{signal:string,actions:{clickTrackingParams:string,openPopupAction:{popup:{multiPageMenuRenderer:{trackingParams:string,style:string,showLoadingSpinner:boolean}},popupType:string,beReused:boolean}}[]}},trackingParams:string,accessibility:{accessibilityData:{label:string}},tooltip:string,style:string}}[],hotkeyDialog:{hotkeyDialogRenderer:{title:{runs:{text:string}[]},sections:{hotkeyDialogSectionRenderer:{title:{runs:{text:string}[]},options:{hotkeyDialogSectionOptionRenderer:{label:{runs:{text:string}[]},hotkey:string}}[]}}[],dismissButton:{buttonRenderer:{style:string,size:string,isDisabled:boolean,text:{runs:{text:string}[]},trackingParams:string}},trackingParams:string}},backButton:{buttonRenderer:{trackingParams:string,command:{clickTrackingParams:string,commandMetadata:{webCommandMetadata:{sendPost:boolean}},signalServiceEndpoint:{signal:string,actions:{clickTrackingParams:string,signalAction:{signal:string}}[]}}}},forwardButton:{buttonRenderer:{trackingParams:string,command:{clickTrackingParams:string,commandMetadata:{webCommandMetadata:{sendPost:boolean}},signalServiceEndpoint:{signal:string,actions:{clickTrackingParams:string,signalAction:{signal:string}}[]}}}},a11ySkipNavigationButton:{buttonRenderer:{style:string,size:string,isDisabled:boolean,text:{runs:{text:string}[]},trackingParams:string,command:{clickTrackingParams:string,commandMetadata:{webCommandMetadata:{sendPost:boolean}},signalServiceEndpoint:{signal:string,actions:{clickTrackingParams:string,signalAction:{signal:string}}[]}}}},voiceSearchButton:{buttonRenderer:{style:string,size:string,isDisabled:boolean,serviceEndpoint:{clickTrackingParams:string,commandMetadata:{webCommandMetadata:{sendPost:boolean}},signalServiceEndpoint:{signal:string,actions:{clickTrackingParams:string,openPopupAction:{popup:{voiceSearchDialogRenderer:{placeholderHeader:{runs:{text:string}[]},promptHeader:{runs:{text:string}[]},exampleQuery1:{runs:{text:string}[]},exampleQuery2:{runs:{text:string}[]},promptMicrophoneLabel:{runs:{text:string}[]},loadingHeader:{runs:{text:string}[]},connectionErrorHeader:{runs:{text:string}[]},connectionErrorMicrophoneLabel:{runs:{text:string}[]},permissionsHeader:{runs:{text:string}[]},permissionsSubtext:{runs:{text:string}[]},disabledHeader:{runs:{text:string}[]},disabledSubtext:{runs:{text:string}[]},microphoneButtonAriaLabel:{runs:{text:string}[]},exitButton:{buttonRenderer:{style:string,size:string,isDisabled:boolean,icon:{iconType:string},trackingParams:string,accessibilityData:{accessibilityData:{label:string}}}},trackingParams:string,microphoneOffPromptHeader:{runs:{text:string}[]}}},popupType:string}}[]}},icon:{iconType:string},tooltip:string,trackingParams:string,accessibilityData:{accessibilityData:{label:string}}}}}},microformat:{microformatDataRenderer:{urlCanonical:string,title:string,description:string,thumbnail:{thumbnails:{url:string,width:number,height:number}[]},siteName:string,appName:string,androidPackage:string,iosAppStoreId:string,iosAppArguments:string,ogType:string,urlApplinksWeb:string,urlApplinksIos:string,urlApplinksAndroid:string,urlTwitterIos:string,urlTwitterAndroid:string,twitterCardType:string,twitterSiteHandle:string,schemaDotOrgType:string,noindex:boolean,unlisted:boolean,linkAlternates:{hrefUrl:string}[]}},sidebar:{playlistSidebarRenderer:{items:{playlistSidebarPrimaryInfoRenderer?:{thumbnailRenderer:{playlistVideoThumbnailRenderer:{thumbnail:{thumbnails:{url:string,width:number,height:number}[]},trackingParams:string}},title:{runs:{text:string,navigationEndpoint:{clickTrackingParams:string,commandMetadata:{webCommandMetadata:{url:string,webPageType:string,rootVe:number}},watchEndpoint:{videoId:string,playlistId:string,playerParams:string,loggingContext:{vssLoggingContext:{serializedContextData:string}},watchEndpointSupportedOnesieConfig:{html5PlaybackOnesieConfig:{commonConfig:{url:string}}}}}}[]},stats:{runs:{text:string}[]}[],menu:{menuRenderer:{items:{menuNavigationItemRenderer:{text:{simpleText:string},icon:{iconType:string},navigationEndpoint:{clickTrackingParams:string,commandMetadata:{webCommandMetadata:{url:string,webPageType:string,rootVe:number,apiUrl:string}},browseEndpoint:{browseId:string,params:string,nofollow:boolean,navigationType:string}},trackingParams:string}}[],trackingParams:string,topLevelButtons:{toggleButtonRenderer:{style:{styleType:string},size:{sizeType:string},isToggled:boolean,isDisabled:boolean,defaultIcon:{iconType:string},toggledIcon:{iconType:string},trackingParams:string,defaultTooltip:string,toggledTooltip:string,defaultNavigationEndpoint:{clickTrackingParams:string,commandMetadata:{webCommandMetadata:{ignoreNavigation:boolean}},modalEndpoint:{modal:{modalWithTitleAndButtonRenderer:{title:{simpleText:string},content:{simpleText:string},button:{buttonRenderer:{style:string,size:string,isDisabled:boolean,text:{simpleText:string},navigationEndpoint:{clickTrackingParams:string,commandMetadata:{webCommandMetadata:{url:string,webPageType:string,rootVe:number}},signInEndpoint:{nextEndpoint:{clickTrackingParams:string,commandMetadata:{webCommandMetadata:{url:string,webPageType:string,rootVe:number,apiUrl:string}},browseEndpoint:{browseId:string}},idamTag:string}},trackingParams:string}}}}}},accessibilityData:{accessibilityData:{label:string}},toggledAccessibilityData:{accessibilityData:{label:string}}}}[],accessibility:{accessibilityData:{label:string}},targetId:string}},thumbnailOverlays:{thumbnailOverlaySidePanelRenderer:{text:{simpleText:string},icon:{iconType:string}}}[],navigationEndpoint:{clickTrackingParams:string,commandMetadata:{webCommandMetadata:{url:string,webPageType:string,rootVe:number}},watchEndpoint:{videoId:string,playlistId:string,playerParams:string,loggingContext:{vssLoggingContext:{serializedContextData:string}},watchEndpointSupportedOnesieConfig:{html5PlaybackOnesieConfig:{commonConfig:{url:string}}}}},badges:{metadataBadgeRenderer:{icon:{iconType:string},style:string,label:string,trackingParams:string}}[],description:{},showMoreText:{runs:{text:string}[]}}playlistSidebarSecondaryInfoRenderer?:{videoOwner:{videoOwnerRenderer:{thumbnail:{thumbnails:{url:string,width:number,height:number}[]},title:{runs:{text:string,navigationEndpoint:{clickTrackingParams:string,commandMetadata:{webCommandMetadata:{url:string,webPageType:string,rootVe:number,apiUrl:string}},browseEndpoint:{browseId:string,canonicalBaseUrl:string}}}[]},navigationEndpoint:{clickTrackingParams:string,commandMetadata:{webCommandMetadata:{url:string,webPageType:string,rootVe:number,apiUrl:string}},browseEndpoint:{browseId:string,canonicalBaseUrl:string}},trackingParams:string}},button:{buttonRenderer:{style:string,size:string,isDisabled:boolean,text:{runs:{text:string}[]},navigationEndpoint:{clickTrackingParams:string,commandMetadata:{webCommandMetadata:{ignoreNavigation:boolean}},modalEndpoint:{modal:{modalWithTitleAndButtonRenderer:{title:{simpleText:string},content:{simpleText:string},button:{buttonRenderer:{style:string,size:string,isDisabled:boolean,text:{simpleText:string},navigationEndpoint:{clickTrackingParams:string,commandMetadata:{webCommandMetadata:{url:string,webPageType:string,rootVe:number}},signInEndpoint:{nextEndpoint:{clickTrackingParams:string,commandMetadata:{webCommandMetadata:{url:string,webPageType:string,rootVe:number,apiUrl:string}},browseEndpoint:{browseId:string}},continueAction:string,idamTag:string}},trackingParams:string}}}}}},trackingParams:string}}}}[],trackingParams:string}}}}} response 
     */
    constructor(response) {
        const data = response.body;
        this.kind = "youtube#playlist";
        this.etag = response.headers.etag;
        this.id = data.contents.twoColumnBrowseResultsRenderer.tabs[0].tabRenderer.content.sectionListRenderer.contents[0].itemSectionRenderer.contents[0].playlistVideoListRenderer.playlistId;
        this.snippet = {
            publishedAt: undefined,
            channelId: data.header.playlistHeaderRenderer.ownerEndpoint ? data.header.playlistHeaderRenderer.ownerEndpoint.browseEndpoint.browseId : undefined,
            title: data.metadata.playlistMetadataRenderer.title,
            description: data.microformat.microformatDataRenderer.description,
            thumbnails: {
                default: data.header.playlistHeaderRenderer.playlistHeaderBanner.heroPlaylistThumbnailRenderer.thumbnail.thumbnails.length == 3 ? undefined : data.header.playlistHeaderRenderer.playlistHeaderBanner.heroPlaylistThumbnailRenderer.thumbnail.thumbnails[0],
                medium: data.header.playlistHeaderRenderer.playlistHeaderBanner.heroPlaylistThumbnailRenderer.thumbnail.thumbnails.length == 3 ? undefined : data.header.playlistHeaderRenderer.playlistHeaderBanner.heroPlaylistThumbnailRenderer.thumbnail.thumbnails[1],
                high: data.header.playlistHeaderRenderer.playlistHeaderBanner.heroPlaylistThumbnailRenderer.thumbnail.thumbnails.length == 3 ? data.header.playlistHeaderRenderer.playlistHeaderBanner.heroPlaylistThumbnailRenderer.thumbnail.thumbnails[0] : data.header.playlistHeaderRenderer.playlistHeaderBanner.heroPlaylistThumbnailRenderer.thumbnail.thumbnails[2],
                standard: data.header.playlistHeaderRenderer.playlistHeaderBanner.heroPlaylistThumbnailRenderer.thumbnail.thumbnails.length == 3 ? data.header.playlistHeaderRenderer.playlistHeaderBanner.heroPlaylistThumbnailRenderer.thumbnail.thumbnails[1] : data.header.playlistHeaderRenderer.playlistHeaderBanner.heroPlaylistThumbnailRenderer.thumbnail.thumbnails[3],
                maxres: data.header.playlistHeaderRenderer.playlistHeaderBanner.heroPlaylistThumbnailRenderer.thumbnail.thumbnails.length == 3 ? data.header.playlistHeaderRenderer.playlistHeaderBanner.heroPlaylistThumbnailRenderer.thumbnail.thumbnails[2] : undefined
            },
            channelTitle: data.header.playlistHeaderRenderer.ownerText ? data.header.playlistHeaderRenderer.ownerText.runs[0].text : data.header.playlistHeaderRenderer.subtitle ? data.header.playlistHeaderRenderer.subtitle.simpleText : undefined,
            defaultLanguage: undefined,
            localized: {
                title: undefined,
                description: undefined
            }
        };
        this.status = {
            privacyStatus: data.header.playlistHeaderRenderer.privacy.toLowerCase()
        };
        this.contentDetails = {
            itemCount: Number(data.header.playlistHeaderRenderer.numVideosText.runs[0].text.split(" ")[0])
        };
        this.player = {
            embedHtml: undefined
        };
        this.localizations = {};
        this.listItems = async () => {
            const arr = [];
            var items = data.contents.twoColumnBrowseResultsRenderer.tabs[0].tabRenderer.content.sectionListRenderer.contents[0].itemSectionRenderer.contents[0].playlistVideoListRenderer.contents;
            for (var i = 0; i < items.length; i++) {
                const item = items[i];
                if (item.continuationItemRenderer) {
                    const response = await requestAPI("browse", { continuation: item.continuationItemRenderer.continuationEndpoint.continuationCommand.token });
                    items = items.concat(response.body.onResponseReceivedActions[0].appendContinuationItemsAction.continuationItems);
                } else if (item.playlistVideoRenderer) {
                    arr.push(new PlaylistItem(item.playlistVideoRenderer));
                }
            }
            return arr;
        };
    }
}

class PlaylistItem {
    kind;
    etag;
    id;
    snippet;
    contentDetails;
    status;

    /**
     * @param {{videoId:string,thumbnail:{thumbnails:{url:string,width:number,height:number}[]},title:{runs:{text:string}[],accessibility:{accessibilityData:{label:string}}},index:{simpleText:string},shortBylineText:{runs:{text:string,navigationEndpoint:{clickTrackingParams:string,commandMetadata:{webCommandMetadata:{url:string,webPageType:string,rootVe:number,apiUrl:string}},browseEndpoint:{browseId:string,canonicalBaseUrl:string}}}[]},lengthText:{accessibility:{accessibilityData:{label:string}},simpleText:string},navigationEndpoint:{clickTrackingParams:string,commandMetadata:{webCommandMetadata:{url:string,webPageType:string,rootVe:number}},watchEndpoint:{videoId:string,playlistId:string,index:number,params:string,playerParams:string,loggingContext:{vssLoggingContext:{serializedContextData:string}},watchEndpointSupportedOnesieConfig:{html5PlaybackOnesieConfig:{commonConfig:{url:string}}}}},lengthSeconds:string,trackingParams:string,isPlayable:boolean,menu:{menuRenderer:{items:{menuServiceItemRenderer:{text:{runs:{text:string}[]},icon:{iconType:string},serviceEndpoint:{clickTrackingParams:string,commandMetadata:{webCommandMetadata:{sendPost:boolean}},signalServiceEndpoint:{signal:string,actions:{clickTrackingParams:string,addToPlaylistCommand:{openMiniplayer:boolean,videoId:string,listType:string,onCreateListCommand:{clickTrackingParams:string,commandMetadata:{webCommandMetadata:{sendPost:boolean,apiUrl:string}},createPlaylistServiceEndpoint:{videoIds:string[],params:string}},videoIds:string[]}}[]}},trackingParams:string}}[],trackingParams:string,accessibility:{accessibilityData:{label:string}}}},thumbnailOverlays:{thumbnailOverlayTimeStatusRenderer:{text:{accessibility:{accessibilityData:{label:string}},simpleText:string},style:string}}[],videoInfo:{runs:{text:string}[]}}} data 
     */
    constructor(data) {
        this.kind = "youtube#playlistItem";
        this.etag = undefined;
        this.id = data.videoId;
        this.snippet = {
            publishedAt: undefined,
            channelId: undefined,
            title: data.title.runs[0].text,
            description: undefined,
            thumbnails: {
                default: data.thumbnail.thumbnails[0],
                medium: data.thumbnail.thumbnails[1],
                high: data.thumbnail.thumbnails[2],
                standard: data.thumbnail.thumbnails[3],
                maxres: undefined
            },
            channelTitle: undefined,
            videoOwnerChannelTitle: data.shortBylineText.runs[0].text,
            videoOwnerChannelId: data.shortBylineText.runs[0].navigationEndpoint.browseEndpoint.browseId,
            playlistId: data.navigationEndpoint.watchEndpoint.playlistId,
            position: Number(data.index.simpleText),
            resourceId: {
                kind: "youtube#video",
                videoId: data.videoId,
            }
        };
        this.contentDetails = {
            videoId: data.videoId,
            startAt: undefined,
            endAt: undefined,
            note: undefined,
            videoPublishedAt: undefined
        };
        this.status = {
            privacyStatus: undefined
        };
    }
}

export async function get(id) {
    const response = await requestAPI("browse", { browseId: "VL" + id });
    if (response.statusCode == 400) {
        return "ERROR";
    } else {
        return new Playlist(response);
    }
}